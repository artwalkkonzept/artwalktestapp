{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\"; // Our reducer functions lives inside this module\n\n/**\n * This artwalks reducer function implements these actions:\n * - ADD_ARTWALK: Add a new artwalk object to the redux store. New id is picked by random. \n * - ADD_BILD: Add a new bild to one of the artwalks in the redux store. Find artwalk by id.\n */\n\nfunction artwalks() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_ARTWALK':\n      {\n        var artwalk = {\n          _id: action.id,\n          name: action.name,\n          bilds: action.bilds\n        };\n        return [].concat(_toConsumableArray(state), [artwalk]);\n      }\n\n    case 'ADD_BILD':\n      {\n        return state.map(function (artwalk) {\n          return artwalk._id === action.artwalkId ? _objectSpread(_objectSpread({}, artwalk), {}, {\n            bilds: [].concat(_toConsumableArray(artwalk.bilds), [action.bild])\n          }) : artwalk;\n        });\n      }\n\n    default:\n      return state;\n  }\n} // Import fetch action\n\n\nexport var addBild = function addBild(artwalkId, bild) {\n  return {\n    type: 'ADD_BILD',\n    bild: bild,\n    artwalkId: artwalkId\n  };\n};\nexport var addArtwalk = function addArtwalk(id, name, bilds) {\n  return {\n    type: 'ADD_ARTWALK',\n    id: id,\n    name: name,\n    bilds: bilds\n  };\n};\nvar API_URL = process.env.REACT_APP_API_URL;\nexport var fetchArtwalks = function fetchArtwalks(_) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var url, result, data, _iterator, _step, artwalk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = \"\".concat(API_URL, \"/artwalks\");\n              console.log(\"Fetching from \".concat(url));\n              _context.next = 4;\n              return fetch(url);\n\n            case 4:\n              result = _context.sent;\n              _context.next = 7;\n              return result.json();\n\n            case 7:\n              data = _context.sent;\n              _iterator = _createForOfIteratorHelper(data);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  artwalk = _step.value;\n                  dispatch(addArtwalk(artwalk._id, artwalk.name, artwalk.bilds));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // Logging middleware for the store. Prints out all actions in the redux store to the browser console.\n\nvar logger = function logger(store) {\n  return function (next) {\n    return function (action) {\n      console.group(action.type);\n      console.info(\"dispatching\", action);\n      var result = next(action);\n      console.log(\"next state\", store.getState());\n      console.groupEnd();\n      return result;\n    };\n  };\n}; // Create the store with some initial data from a json file.\n// Adding the logging middleware from above as well.\n\n\nvar store = createStore(reducer, applyMiddleware(logger, thunkMiddleware));\nstore.dispatch(fetchArtwalks());\nReactDOM.render(\n/*#__PURE__*/\n// Provide the store to all components from <App> and below\n_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 77,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/admin/Desktop/artwalktestapp/artwalktestapp-hooks/client/src/index.js"],"names":["React","ReactDOM","App","Provider","applyMiddleware","createStore","thunkMiddleware","artwalks","state","action","type","artwalk","_id","id","name","bilds","map","artwalkId","bild","addBild","addArtwalk","API_URL","process","env","REACT_APP_API_URL","fetchArtwalks","_","dispatch","url","console","log","fetch","result","json","data","logger","store","next","group","info","getState","groupEnd","reducer","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\n// Our reducer functions lives inside this module\n\n/**\n * This artwalks reducer function implements these actions:\n * - ADD_ARTWALK: Add a new artwalk object to the redux store. New id is picked by random. \n * - ADD_BILD: Add a new bild to one of the artwalks in the redux store. Find artwalk by id.\n */\n function artwalks(state = [], action) {\n  switch (action.type) {\n    case 'ADD_ARTWALK': {\n      const artwalk = {\n        _id: action.id,\n        name: action.name,\n        bilds: action.bilds\n      };\n      return [...state, artwalk];\n    }\n    case 'ADD_BILD': {\n      return state.map(artwalk => artwalk._id === action.artwalkId ?\n        { ...artwalk, bilds: [...artwalk.bilds, action.bild] } : artwalk);\n    }\n    \n    default: return state;\n  }\n}\n\n// Import fetch action\nexport const addBild = (artwalkId, bild) => ({\n  type: 'ADD_BILD',\n  bild: bild,\n  artwalkId: artwalkId\n});\n\nexport const addArtwalk = (id, name, bilds) => ({\n  type: 'ADD_ARTWALK',\n  id: id,\n  name: name,\n  bilds: bilds\n});\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const fetchArtwalks = _ => async function (dispatch) {\n  const url = `${API_URL}/artwalks`;\n  console.log(`Fetching from ${url}`);\n  const result = await fetch(url);\n  const data = await result.json();\n  for (const artwalk of data) {\n    dispatch(addArtwalk(artwalk._id, artwalk.name, artwalk.bilds));\n  }\n};\n\n// Logging middleware for the store. Prints out all actions in the redux store to the browser console.\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  console.groupEnd();\n  return result;\n};\n\n// Create the store with some initial data from a json file.\n// Adding the logging middleware from above as well.\nconst store = createStore(reducer, applyMiddleware(logger, thunkMiddleware));\nstore.dispatch(fetchArtwalks());\n\nReactDOM.render(\n  // Provide the store to all components from <App> and below\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}