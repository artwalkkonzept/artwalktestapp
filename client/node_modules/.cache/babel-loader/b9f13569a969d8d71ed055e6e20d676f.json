{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/admin/Desktop/artwalktestappen/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\"; // Our reducer functions lives inside this module\n\nimport reducer from \"./reducers\"; // Import fetch action\n\nimport { fetchArtwalks } from \"./actions\"; // Logging middleware for the store. Prints out all actions in the redux store to the browser console.\n\nvar logger = function logger(store) {\n  return function (next) {\n    return function (action) {\n      console.group(action.type);\n      console.info(\"dispatching\", action);\n      var result = next(action);\n      console.log(\"next state\", store.getState());\n      console.groupEnd();\n      return result;\n    };\n  };\n}; // Create the store with some initial data from a json file.\n// Adding the logging middleware from above as well.\n\n\nvar store = createStore(reducer, applyMiddleware(logger, thunkMiddleware));\nstore.dispatch(fetchKittens());\nReactDOM.render(\n/*#__PURE__*/\n// Provide the store to all components from <App> and below\n_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 31,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/admin/Desktop/artwalktestappen/client/src/index.js"],"names":["React","ReactDOM","App","Provider","applyMiddleware","createStore","thunkMiddleware","reducer","fetchArtwalks","logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","dispatch","fetchKittens","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CAEA;;AACA,SAASC,aAAT,QAA8B,WAA9B,C,CAEA;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACxCC,MAAAA,OAAO,CAACC,KAAR,CAAcF,MAAM,CAACG,IAArB;AACAF,MAAAA,OAAO,CAACG,IAAR,CAAa,aAAb,EAA4BJ,MAA5B;AACA,UAAIK,MAAM,GAAGN,IAAI,CAACC,MAAD,CAAjB;AACAC,MAAAA,OAAO,CAACK,GAAR,CAAY,YAAZ,EAA0BR,KAAK,CAACS,QAAN,EAA1B;AACAN,MAAAA,OAAO,CAACO,QAAR;AACA,aAAOH,MAAP;AACD,KAP2B;AAAA,GAAR;AAAA,CAApB,C,CASA;AACA;;;AACA,IAAMP,KAAK,GAAGL,WAAW,CAACE,OAAD,EAAUH,eAAe,CAACK,MAAD,EAASH,eAAT,CAAzB,CAAzB;AACAI,KAAK,CAACW,QAAN,CAAeC,YAAY,EAA3B;AAEArB,QAAQ,CAACsB,MAAT;AAAA;AACE;AACA,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAA,2BACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QAFF,EAOEc,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\n\n// Our reducer functions lives inside this module\nimport reducer from \"./reducers\";\n\n// Import fetch action\nimport { fetchArtwalks } from \"./actions\";\n\n// Logging middleware for the store. Prints out all actions in the redux store to the browser console.\nconst logger = store => next => action => {\n  console.group(action.type);\n  console.info(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  console.groupEnd();\n  return result;\n};\n\n// Create the store with some initial data from a json file.\n// Adding the logging middleware from above as well.\nconst store = createStore(reducer, applyMiddleware(logger, thunkMiddleware));\nstore.dispatch(fetchKittens());\n\nReactDOM.render(\n  // Provide the store to all components from <App> and below\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}